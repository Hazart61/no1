import telebot
from telebot import types
from datetime import datetime
import requests
import random
from database import (add_user, get_user, get_user_by_username,
                      get_all_users, delete_user, add_friend, update_user)

# –∫–ª—é—á–∏
Token_tg = '7148550227:AAFE_eBe-UkNE42UebmujyvidyAipQe8Zwg'
Api = 'be1feead-ce5e-4c74-b620-7b32364dc431'
bot = telebot.TeleBot(Token_tg)

users = {}

# –í–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã /recommend)
Questions = {
    "price": {
        "question": "–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        "options": ["üí∞ –ë—é–¥–∂–µ—Ç–Ω—ã–π", "üíµ –°—Ä–µ–¥–Ω–∏–π", "üíé –ü—Ä–µ–º–∏—É–º"]
    },
    "atmosphere": {
        "question": "–ö–∞–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞?",
        "options": ["üòå –°–ø–æ–∫–æ–π–Ω–∞—è", "üéâ –í–µ—Å–µ–ª–∞—è", "üíº –î–µ–ª–æ–≤–∞—è"]
    },
    "crowd": {
        "question": "–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
        "options": ["üë• –ú–Ω–æ–≥–æ–ª—é–¥–Ω–æ", "üë´ –£–º–µ—Ä–µ–Ω–Ω–æ", "üö∂‚Äç‚ôÇÔ∏è –ú–∞–ª–æ –ª—é–¥–µ–π"]
    },
    "music": {
        "question": "–ö–∞–∫–∞—è –º—É–∑—ã–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞?",
        "options": ["üéµ –õ—é–±–∞—è", "üé∂ –ñ–∏–≤–∞—è", "üîá –ë–µ–∑ –º—É–∑—ã–∫–∏"]
    },
    "food": {
        "question": "–ö–∞–∫–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
        "options": ["üçî –§–∞—Å—Ç—Ñ—É–¥", "üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–µ", "ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ"]
    },
    "alcohol": {
        "question": "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∞–ª–∫–æ–≥–æ–ª—é?",
        "options": ["üçª –ï—Å—Ç—å –∞–ª–∫–æ–≥–æ–ª—å", "üö´ –¢–æ–ª—å–∫–æ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–µ", "ü§∑ –ù–µ –≤–∞–∂–Ω–æ"]
    },
    "outdoor": {
        "question": "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é?",
        "options": ["üå≥ –ù–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–æ–∑–¥—É—Ö–µ", "üè¢ –í –ø–æ–º–µ—â–µ–Ω–∏–∏", "ü§∑ –ù–µ –≤–∞–∂–Ω–æ"]
    },
    "accessibility": {
        "question": "–í–∞–∂–Ω–∞ –ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –º–∞–ª–æ–º–æ–±–∏–ª—å–Ω—ã—Ö?",
        "options": ["‚ôø –î–∞, –≤–∞–∂–Ω–æ", "üö∂‚Äç‚ôÇÔ∏è –ù–µ—Ç, –Ω–µ –≤–∞–∂–Ω–æ"]
    },
    "parking": {
        "question": "–ù—É–∂–Ω–∞ –ª–∏ –ø–∞—Ä–∫–æ–≤–∫–∞?",
        "options": ["üÖøÔ∏è –î–∞, –Ω—É–∂–Ω–∞", "üö∂‚Äç‚ôÇÔ∏è –ù–µ—Ç, –Ω–µ –Ω—É–∂–Ω–∞"]
    },
    "wifi": {
        "question": "–ù—É–∂–µ–Ω –ª–∏ Wi-Fi?",
        "options": ["üì∂ –î–∞, –Ω—É–∂–µ–Ω", "üö´ –ù–µ—Ç, –Ω–µ –Ω—É–∂–µ–Ω"]
    }
}


def register_user(user_id, username):
    existing_user = get_user_by_username(username)
    if existing_user:
        return False

    try:
        add_user(user_id, username)
        users[user_id] = {
            'username': username,
            'favorites': [],
            'reviews': {},
            'friends': [],
            'friend_requests': [],
            'registration_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False


def get_user_profile(user_id):
    user = get_user(user_id)
    if user:
        user_data = {
            'user_id': user[0],
            'username': user[1],
            'favorites': user[2].split(',') if user[2] else [],
            'reviews': eval(user[3]) if user[3] else {},
            'friends': [int(friend_id) for friend_id in user[4].split(',') if friend_id] if user[4] else [],
            'friend_requests': [int(req_id) for req_id in user[5].split(',') if req_id] if user[5] else [],
            'registration_date': user[6]
        }

        friends_usernames = []
        for friend_id in user_data['friends']:
            friend = users.get(friend_id)
            if friend:
                friends_usernames.append(friend['username'])

        favorites = ', '.join(user_data['favorites']) or '–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç'
        reviews = '\n'.join([f"{addr}: {review}" for addr, review in user_data['reviews'].items()]) or '–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤'
        friends_count = len(friends_usernames)
        friends_list = ', '.join(friends_usernames) or '–ù–µ—Ç –¥—Ä—É–∑–µ–π'

        return (f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                f"–ò–º—è: {user_data['username']}\n"
                f"üè† –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞: {favorites}\n"
                f"üìù –û—Ç–∑—ã–≤—ã:\n{reviews}\n"
                f"üë• –î—Ä—É–∑—å—è: {friends_list}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data['registration_date']}")
    return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∏—Ä–£–≥–æ–ª–∫–æ–≤! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
        "/add_favorite - –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
        "/remove_favorite - –£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\n"
        "/add_review - –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –º–µ—Å—Ç–µ\n"
        "/remove_review - –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤\n"
        "/find_friend - –ù–∞–π—Ç–∏ –¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏\n"
        "/profile - –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/delete_profile - –£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/change_username - –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/view_friends - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π\n"
        "/remove_friend - –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞\n"
        "/view_requests - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è\n"
        "/search - –ü–æ–∏—Å–∫ –º–µ—Å—Ç –ø–æ –≥–æ—Ä–æ–¥—É –∏ –∑–∞–ø—Ä–æ—Å—É\n"
        "/recommend - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–µ—Å—Ç"
    )
    bot.send_message(message.chat.id, help_text)


@bot.message_handler(commands=['register'])
def register(message):
    user_id = message.from_user.id
    if user_id in users:
        bot.send_message(message.chat.id,
                         "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(message, process_registration)


def process_registration(message):
    username = message.text.strip()
    if register_user(message.from_user.id, username):
        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        bot.send_message(message.chat.id, "–≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.")
        bot.register_next_step_handler(message, process_registration)


@bot.message_handler(commands=['profile'])
def profile_command(message):
    user_id = message.from_user.id
    profile_info = get_user_profile(user_id)
    bot.send_message(message.chat.id, profile_info)

@bot.message_handler(commands=['add_favorite'])
def add_favorite_place(message):
    user_id = message.from_user.id
    if user_id not in users:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:")
    bot.register_next_step_handler(message, process_add_favorite)


def process_add_favorite(message):
    user_id = message.from_user.id
    address = message.text.strip()
    users[user_id]['favorites'].append(address)
    update_user(user_id, users[user_id])
    bot.send_message(user_id, f"–ê–¥—Ä–µ—Å '{address}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞!")


@bot.message_handler(commands=['remove_favorite'])
def remove_favorite_place(message):
    user_id = message.from_user.id
    if user_id not in users:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return

    favorites = users[user_id]['favorites']
    if not favorites:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    favorites_list = "\n".join([f"{i + 1}. {fav}" for i, fav in enumerate(favorites)])
    bot.send_message(user_id, f"–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:\n{favorites_list}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_remove_favorite)


def process_remove_favorite(message):
    user_id = message.from_user.id
    try:
        index = int(message.text.strip()) - 1
        if 0 <= index < len(users[user_id]['favorites']):
            removed_place = users[user_id]['favorites'].pop(index)
            update_user(user_id, users[user_id])
            bot.send_message(user_id, f"–ú–µ—Å—Ç–æ '{removed_place}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            bot.register_next_step_handler(message, process_remove_favorite)
    except ValueError:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞.")
        bot.register_next_step_handler(message, process_remove_favorite)


@bot.message_handler(commands=['delete_profile'])
def delete_profile_command(message):
    user_id = message.from_user.id
    if user_id not in users:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return
    bot.send_message(user_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? (–¥–∞/–Ω–µ—Ç)")
    bot.register_next_step_handler(message, process_delete_profile)


def process_delete_profile(message):
    user_id = message.from_user.id
    response = message.text.strip().lower()
    if response == '–¥–∞':
        delete_user(user_id)
        del users[user_id]
        bot.send_message(user_id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω.")
    else:
        bot.send_message(user_id, "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@bot.message_handler(commands=['add_review'])
def add_review_command(message):
    user_id = message.from_user.id
    if user_id not in users:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞:")
    bot.register_next_step_handler(message, process_review_address)


def process_review_address(message):
    user_id = message.from_user.id
    address = message.text.strip()
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞:")
    bot.register_next_step_handler(message, lambda msg: process_review_description(msg, address))


def process_review_description(message, address):
    user_id = message.from_user.id
    description = message.text.strip()
    users[user_id]['reviews'][address] = description
    update_user(user_id, users[user_id])
    bot.send_message(user_id, f"–û—Ç–∑—ã–≤ –Ω–∞ –∞–¥—Ä–µ—Å '{address}' –¥–æ–±–∞–≤–ª–µ–Ω!")


@bot.message_handler(commands=['remove_review'])
def remove_review_command(message):
    user_id = message.from_user.id
    if user_id not in users:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return

    reviews = users[user_id]['reviews']
    if not reviews:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    reviews_list = "\n".join([f"{i + 1}. {addr}" for i, addr in enumerate(reviews.keys())])
    bot.send_message(user_id, f"–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã:\n{reviews_list}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–∑—ã–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_remove_review)


def process_remove_review(message):
    user_id = message.from_user.id
    try:
        index = int(message.text.strip()) - 1
        addresses = list(users[user_id]['reviews'].keys())
        if 0 <= index < len(addresses):
            removed_address = addresses[index]
            removed_review = users[user_id]['reviews'].pop(removed_address)
            update_user(user_id, users[user_id])
            bot.send_message(user_id, f"–û—Ç–∑—ã–≤ –Ω–∞ –∞–¥—Ä–µ—Å '{removed_address}' —É–¥–∞–ª–µ–Ω!")
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            bot.register_next_step_handler(message, process_remove_review)
    except ValueError:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–∑—ã–≤–∞.")
        bot.register_next_step_handler(message, process_remove_review)


@bot.message_handler(commands=['find_friend'])
def find_friend_by_name(message):
    user_id = message.from_user.id
    if user_id not in users:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥—Ä—É–≥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(message, process_find_friend)


def process_find_friend(message):
    friend_name = message.text.strip()
    found_friends = []

    for user_id, user_data in users.items():
        if (user_data['username'].lower() == friend_name.lower() and
                user_id != message.from_user.id and
                user_id not in users[message.from_user.id]['friends']):
            found_friends.append((user_id, user_data['username']))

    if found_friends:
        markup = types.InlineKeyboardMarkup()
        for friend_id, friend_username in found_friends:
            markup.add(types.InlineKeyboardButton(
                f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å {friend_username}",
                callback_data=f'send_request_{friend_id}'
            ))
        bot.send_message(message.chat.id, "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ —è–≤–ª—è—é—Ç—Å—è –≤–∞—à–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('send_request_'))
def handle_send_request(call):
    friend_id = int(call.data.split('_')[2])
    user_id = call.from_user.id

    if friend_id not in users:
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if friend_id in users[user_id]['friends']:
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –¥—Ä—É–∑—å—è —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        return

    if user_id in users[friend_id]['friend_requests']:
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        return

    users[friend_id]['friend_requests'].append(user_id)
    update_user(friend_id, users[friend_id])

    markup = types.InlineKeyboardMarkup()
    accept_button = types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'accept_{user_id}')
    reject_button = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'reject_{user_id}')
    markup.add(accept_button, reject_button)

    bot.send_message(
        friend_id,
        f"üì© {users[user_id]['username']} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É!",
        reply_markup=markup
    )
    bot.answer_callback_query(call.id, f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {users[friend_id]['username']}.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('accept_'))
def accept_friend_request(call):
    requester_id = int(call.data.split('_')[1])
    user_id = call.from_user.id

    if requester_id not in users[user_id]['friend_requests']:
        bot.answer_callback_query(call.id, "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if requester_id not in users[user_id]['friends']:
        users[user_id]['friends'].append(requester_id)
    if user_id not in users[requester_id]['friends']:
        users[requester_id]['friends'].append(user_id)

    users[user_id]['friend_requests'].remove(requester_id)

    update_user(user_id, users[user_id])
    update_user(requester_id, users[requester_id])

    bot.edit_message_text(
        f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç {users[requester_id]['username']}, —Ç–µ–ø–µ—Ä—å –≤—ã –¥—Ä—É–∑—å—è!",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )
    bot.send_message(
        requester_id,
        f"üéâ {users[user_id]['username']} –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è!"
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('reject_'))
def reject_friend_request(call):
    requester_id = int(call.data.split('_')[1])
    user_id = call.from_user.id

    if requester_id not in users[user_id]['friend_requests']:
        bot.answer_callback_query(call.id, "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    users[user_id]['friend_requests'].remove(requester_id)
    update_user(user_id, users[user_id])

    bot.edit_message_text(
        f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç {users[requester_id]['username']}.",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )
    bot.send_message(
        requester_id,
        f"üòû {users[user_id]['username']} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è."
    )


@bot.message_handler(commands=['view_friends'])
def view_friends_command(message):
    user_id = message.from_user.id
    if user_id not in users:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return

    friends_list = []
    for friend_id in users[user_id]['friends']:
        friend = users.get(friend_id)
        if friend:
            friends_list.append(friend['username'])

    if friends_list:
        bot.send_message(user_id, "–í–∞—à–∏ –¥—Ä—É–∑—å—è:\n" + "\n".join(friends_list))
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π.")


@bot.message_handler(commands=['view_requests'])
def view_friend_requests(message):
    user_id = message.from_user.id
    if user_id not in users:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return

    requests_list = []
    for req_id in users[user_id]['friend_requests']:
        requester = users.get(req_id)
        if requester:
            requests_list.append(requester['username'])

    if requests_list:
        markup = types.InlineKeyboardMarkup()
        for req_id in users[user_id]['friend_requests']:
            requester = users.get(req_id)
            if requester:
                markup.add(
                    types.InlineKeyboardButton(
                        f"–ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –æ—Ç {requester['username']}",
                        callback_data=f'accept_{req_id}'
                    ),
                    types.InlineKeyboardButton(
                        f"–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –æ—Ç {requester['username']}",
                        callback_data=f'reject_{req_id}'
                    )
                )
        bot.send_message(user_id, "–í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è:", reply_markup=markup)
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–∑—å—è.")


@bot.message_handler(commands=['remove_friend'])
def remove_friend_command(message):
    user_id = message.from_user.id
    if user_id not in users:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return

    friends_list = []
    for friend_id in users[user_id]['friends']:
        friend = users.get(friend_id)
        if friend:
            friends_list.append(f"{len(friends_list) + 1}. {friend['username']}")

    if not friends_list:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥—Ä—É–∑–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    bot.send_message(
        user_id,
        f"–í–∞—à–∏ –¥—Ä—É–∑—å—è:\n" + "\n".join(friends_list) + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"
    )
    bot.register_next_step_handler(message, process_remove_friend)


def process_remove_friend(message):
    user_id = message.from_user.id
    try:
        index = int(message.text.strip()) - 1
        friends_ids = users[user_id]['friends']
        if 0 <= index < len(friends_ids):
            friend_id = friends_ids[index]
            friend = users.get(friend_id)

            users[user_id]['friends'].remove(friend_id)
            if user_id in users[friend_id]['friends']:
                users[friend_id]['friends'].remove(user_id)

            update_user(user_id, users[user_id])
            update_user(friend_id, users[friend_id])

            bot.send_message(
                user_id,
                f"–í—ã –±–æ–ª—å—à–µ –Ω–µ –¥—Ä—É–∑—å—è —Å {friend['username']}."
            )
            bot.send_message(
                friend_id,
                f"{users[user_id]['username']} —É–¥–∞–ª–∏–ª –≤–∞—Å –∏–∑ –¥—Ä—É–∑–µ–π."
            )
        else:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥—Ä—É–≥–∞.")


@bot.message_handler(commands=['change_username'])
def change_username_command(message):
    user_id = message.from_user.id
    if user_id not in users:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    bot.register_next_step_handler(message, process_change_username)


def process_change_username(message):
    user_id = message.from_user.id
    new_username = message.text.strip()

    existing_user = get_user_by_username(new_username)
    if existing_user and existing_user['user_id'] != user_id:
        bot.send_message(user_id, "–≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.")
        bot.register_next_step_handler(message, process_change_username)
    else:
        users[user_id]['username'] = new_username
        update_user(user_id, users[user_id])
        bot.send_message(user_id, f"–í–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_username}.")


@bot.message_handler(commands=['search'])
def search_command(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏—Å–∫–∞—Ç—å –º–µ—Å—Ç–∞?")
    bot.register_next_step_handler(message, process_search_city)


def process_search_city(message):
    city = message.text.strip()
    if not city:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        bot.register_next_step_handler(message, process_search_city)
        return

    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {'search_data': {}}
    users[user_id]['search_data'] = {'city': city}

    bot.send_message(message.chat.id, f"–ò—â–µ–º –≤ –≥–æ—Ä–æ–¥–µ {city}. –ß—Ç–æ –∏—â–µ–º? (–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞—Ñ–µ, –ø–∞—Ä–∫, –º—É–∑–µ–π)")
    bot.register_next_step_handler(message, process_search_query)


def process_search_query(message):
    query = message.text.strip()
    if not query:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á—Ç–æ –∏—Å–∫–∞—Ç—å.")
        bot.register_next_step_handler(message, process_search_query)
        return

    user_id = message.from_user.id
    city = users[user_id]['search_data']['city']

    places = yandex_geocode(city, query)
    if not places:
        bot.send_message(message.chat.id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.")
        return

    message_text = "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:\n\n"
    for i, place in enumerate(places, 1):
        message_text += (
            f"{i}. <b>{place['name']}</b>\n"
            f"üìç –ê–¥—Ä–µ—Å: {place['address']}\n"
            f"üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {place['lat']}, {place['lon']}\n\n"
        )

    markup = types.InlineKeyboardMarkup()
    refresh_button = types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_search_{city}_{query}")
    markup.add(refresh_button)

    bot.send_message(message.chat.id, message_text, reply_markup=markup, parse_mode="HTML")


@bot.callback_query_handler(func=lambda call: call.data.startswith('refresh_search_'))
def refresh_search_results(call):
    data = call.data.split('_')
    city = data[2]
    query = '_'.join(data[3:])

    places = yandex_geocode(city, query)
    if not places:
        bot.answer_callback_query(call.id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    message_text = "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:\n\n"
    for i, place in enumerate(places, 1):
        message_text += (
            f"{i}. <b>{place['name']}</b>\n"
            f"üìç –ê–¥—Ä–µ—Å: {place['address']}\n"
            f"üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {place['lat']}, {place['lon']}\n\n"
        )

    markup = types.InlineKeyboardMarkup()
    refresh_button = types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_search_{city}_{query}")
    markup.add(refresh_button)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=message_text,
        reply_markup=markup,
        parse_mode="HTML"
    )
    bot.answer_callback_query(call.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


def yandex_geocode(city, query):
    try:
        url = "https://geocode-maps.yandex.ru/1.x/"
        params = {
            "apikey": Api,
            "geocode": f"{city}, {query}",
            "format": "json",
            "results": 5,
        }
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()

        data = response.json()
        places = []
        features = data.get("response", {}).get("GeoObjectCollection", {}).get("featureMember", [])

        if not features:
            return None

        for feature in features:
            geo = feature.get("GeoObject", {})
            name = geo.get("name", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            address = geo.get("description", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
            coords = geo.get("Point", {}).get("pos", "").split()

            if len(coords) >= 2:
                places.append({
                    "name": name,
                    "address": address,
                    "lat": coords[1],
                    "lon": coords[0],
                })

        return places if places else None

    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –Ø–Ω–¥–µ–∫—Å: {e}")
        return None
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None


@bot.message_handler(commands=['recommend'])
def recommend_command(message):
    user_id = message.from_user.id
    if user_id not in users:
        bot.send_message(user_id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return

    users[user_id]['recommend_data'] = {}
    bot.send_message(user_id,
                     "üí°  –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?")
    bot.register_next_step_handler(message, recommend_ask_city)


def recommend_ask_city(message):
    user_id = message.from_user.id
    city = message.text.strip()
    if not city:
        bot.send_message(user_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        bot.register_next_step_handler(message, recommend_ask_city)
        return

    users[user_id]['recommend_data']['city'] = city
    bot.send_message(
        user_id,
        f"üåÜ –ö–∞–∫–æ–µ –º–µ—Å—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞—Ñ–µ, –ø–∞—Ä–∫, –º—É–∑–µ–π, —Ä–µ—Å—Ç–æ—Ä–∞–Ω)")
    bot.register_next_step_handler(message, recommend_ask_query)


def recommend_ask_query(message):
    user_id = message.from_user.id
    query = message.text.strip()
    if not query:
        bot.send_message(user_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏—â–µ–º.")
        bot.register_next_step_handler(message, recommend_ask_query)
        return

    users[user_id]['recommend_data']['query'] = query
    users[user_id]['recommend_data']['preferences'] = {}

    selected_questions = random.sample(list(Questions.items()), 3)
    users[user_id]['recommend_data']['selected_questions'] = [q[0] for q in selected_questions]
    users[user_id]['recommend_data']['current_question'] = 0

    recommend_ask_next_question(message)


def recommend_ask_next_question(message):
    user_id = message.from_user.id
    recommend_data = users[user_id]['recommend_data']
    questions = recommend_data['selected_questions']
    current = recommend_data['current_question']

    if current >= len(questions):
        recommend_find_places(message)
        return

    question_key = questions[current]
    question_data = Questions[question_key]

    markup = types.InlineKeyboardMarkup()
    for option in question_data["options"]:
        markup.add(types.InlineKeyboardButton(option, callback_data=f"pref_{question_key}_{option}"))

    bot.send_message(
        user_id,
        text=question_data["question"],
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('pref_'))
def handle_preference(call):
    user_id = call.from_user.id
    _, question_key, option = call.data.split('_', 2)

    users[user_id]['recommend_data']['preferences'][question_key] = option
    users[user_id]['recommend_data']['current_question'] += 1

    message = types.Message.de_json(call.message.json)
    message.from_user = call.from_user
    recommend_ask_next_question(message)


def recommend_find_places(message):
    user_id = message.from_user.id
    recommend_data = users[user_id]['recommend_data']
    city = recommend_data.get("city", "")
    query = recommend_data.get("query", "")
    preferences = recommend_data.get("preferences", {})

    if not city or not query:
        bot.send_message(user_id, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return recommend_command(message)

    search_query = f"{query}"

    places = yandex_geocode(city, search_query)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é yandex_geocode

    if not places:
        bot.send_message(
            user_id,
            "üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.")
        return recommend_command(message)

    recommend_send_results(user_id, places)


def recommend_send_results(user_id, places):
    message = "üí° *–ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º:*\n\n"
    for i, place in enumerate(places, 1):
        message += (
            f"{i}. *{place['name']}*\n"
            f"üìç –ê–¥—Ä–µ—Å: {place['address']}\n"
            f"üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {place['lat']}, {place['lon']}\n\n"
        )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
    markup = types.InlineKeyboardMarkup()

    bot.send_message(
        user_id,
        text=message,
        reply_markup=markup,
        parse_mode="Markdown"
    )


if __name__ == "__main__":
    all_users_from_db = get_all_users()
    for db_user in all_users_from_db:
        users[db_user['user_id']] = {
            'username': db_user['username'],
            'favorites': db_user['favorites'],
            'reviews': db_user['reviews'],
            'friends': [int(friend_id) for friend_id in db_user['friends'] if friend_id],
            'friend_requests': [int(req_id) for req_id in db_user['friend_requests'] if req_id],
            'registration_date': db_user['registration_date']
        }
    bot.polling(none_stop=True)